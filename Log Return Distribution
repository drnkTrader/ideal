int OPT0 = Convert.ToInt32(Sistem.Parametreler[0]);//1000
int OPT1 = Convert.ToInt32(Sistem.Parametreler[1]);//80
int OPT2 = Convert.ToInt32(Sistem.Parametreler[2]);//
int OPT3 = Convert.ToInt32(Sistem.Parametreler[3]);//

//Sistem Verileri
var V = Sistem.GrafikVerileri;
List<float> C = Sistem.GrafikFiyatSec("Acilis");

int mlen = OPT0;
int dlen = OPT1;
int mult1 = OPT2;
int mult2 = OPT3;


var logReturn = Sistem.Liste(V.Count, 0.0f);
var values = Sistem.Liste(V.Count, 0.0f);
//var mean = Sistem.Liste(V.Count, 0.0f);
var dist = Sistem.Liste(V.Count, 0.0f);
var zero = Sistem.Liste(V.Count, 0.0f);
var z1 = Sistem.Liste(V.Count, 0.0f);
var z2 = Sistem.Liste(V.Count, 0.0f);
var z3 = Sistem.Liste(V.Count, 0.0f);
var z4 = Sistem.Liste(V.Count, 0.0f);
float mean = 0.0f;
float variance = 0.0f;
float std = 0.0f;
float skew = 0.0f;
float kurt = 0.0f;
float variance_s = 0.0f;
float std_s = 0.0f;
float skew_s = 0.0f;
float kurt_s = 0.0f;

//Calc Log Return
for (int i = V.Count - mlen; i < V.Count; i++)
{
    logReturn[i] = (float)(Math.Round(Math.Log(C[i] / C[i - 1]), mult1)*100f);
    //z[i] = i;
}

//Log Return Distributions

    for (int i = Sistem.BarSayisi - mlen; i < Sistem.BarSayisi; i++)
    {
for (int x = 0; x <= dlen; x++)
{
        float k = (float)(Math.Round((x - (dlen / 2f))/ Math.Pow(10, mult2), mult1) );
        values[x] = k;

        if (x == 0 && logReturn[i] <= k) dist[x]++;
        if (x > 1 && x < dlen + 1 && logReturn[i] == k) dist[x]++;
        if (x == dlen && logReturn[i] >= k) dist[x]++;
    }
}

//Shift to the end
for (int x = dlen; x >= 0; x--)
{
    dist[Sistem.BarSayisi + x - dlen - 1] = dist[x];
dist[x] = 0f;
    //if ( x == dlen/2 ) dist[Sistem.BarSayisi+x-dlen-1]=0;
    values[Sistem.BarSayisi + x - dlen - 1] = values[x];
values[x] = 0f;
}

float sum = 0f;

for (int i = Sistem.BarSayisi - mlen; i < Sistem.BarSayisi; i++)
{
    //Calculation of mean
    for (int j = 1; j < mlen; j++)
    {
        float val = logReturn[i - j];
        sum += val;
        val = 0f;
    }

    mean = sum / mlen;

    sum = 0f;

    //Calculation of population centered Variance and Standart Deviation

    for (int j = 1; j < mlen; j++)
    {
        float val = (float)(Math.Pow(logReturn[i - j] - mean, 2));
        sum += val;
        val = 0f;
    }

    variance = (float)sum / mlen;
    variance_s = (float)sum / (mlen - 1);

    std = (float)Math.Sqrt(variance);
    std_s = (float)Math.Sqrt(variance_s);

    sum = 0f;

    //Calculation of population standardized skewness

    for (int j = 1; j < mlen; j++)
    {
        float val = (float)(Math.Pow(logReturn[i - j] - mean, 3));
        sum += val;
        val = 0f;
    }

    skew = (float)sum / (mlen * std * std * std);
    skew_s = (float)(sum * mlen) / ((std_s * std_s * std_s) * (mlen - 1) * (mlen - 2));
    sum = 0f;

    z1[i] = skew_s;

    //Calculation of population standardized kurtosis

    for (int j = 1; j < mlen; j++)
    {
        float val = (float)(Math.Pow(logReturn[i - j] - mean, 4));
        sum += val;
        val = 0f;
    }

    kurt = (float)sum / (mlen * std * std * std * std);
    kurt_s = (float)(sum / (std_s * std_s * std_s * std_s));
    kurt_s = kurt_s * (float)(mlen * mlen + mlen) / ((mlen - 1) * (mlen - 2) * (mlen - 3));
    kurt_s = kurt_s - ((3f * (float)Math.Pow(mlen - 1, 2)) / ((mlen - 2) * (mlen - 3)))+3;
    sum = 0f;

}

int px = 10;
int py1 = 15;
int py2 = 115;


Sistem.ZeminYazisiEkle("\t--Dist Moments as Sample--", 3, px, py1, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Mean\t\t: " + mean.ToString("0.00000000"), 3, px, py1 + 20, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Variance\t: " + variance_s.ToString("0.00000000"), 3, px, py1 + 35, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Std Dev\t\t: " + std_s.ToString("0.00000000"), 3, px, py1 + 50, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Skewness\t: " + skew_s.ToString("0.00000000"), 3, px, py1 + 65, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Kurtosis\t: " + kurt_s.ToString("0.00000000"), 3, px, py1 + 80, Color.Gold, "Arial", 9);

Sistem.ZeminYazisiEkle("\t--Dist Moments as Population--", 3, px, py2, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Mean\t\t: " + mean.ToString("0.00000000"), 3, px, py2 + 20, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Variance\t: " + variance.ToString("0.00000000"), 3, px, py2 + 35, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Std Dev\t\t: " + std.ToString("0.00000000"), 3, px, py2 + 50, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Skewness\t: " + skew.ToString("0.00000000"), 3, px, py2 + 65, Color.Gold, "Arial", 9);
Sistem.ZeminYazisiEkle("Kurtosis\t: " + kurt.ToString("0.00000000"), 3, px, py2 + 80, Color.Gold, "Arial", 9);

Sistem.Cizgiler[0].Deger = zero;
Sistem.Cizgiler[1].Deger = logReturn;
Sistem.Cizgiler[2].Deger = dist;
Sistem.Cizgiler[3].Deger = values;
//Sistem.Cizgiler[4].Deger = z1;
